% Dijkstra's algorithm in PostScript

% Define a procedure for finding the minimum distance node
% This procedure takes a list of nodes and their distances
% as input and returns the index of the node with the
% minimum distance.
/find_min_dist_node {
  % Initialize variables
  /min_dist_node -1
  /min_dist -1

  % Loop through the list of nodes
  {
    % Get the current node and its distance
    dup
    /node exch def
    /dist exch def

    % Update the minimum distance and node if necessary
    dist min_dist lt {
      /min_dist dist def
      /min_dist_node node def
    }
  } forall

  % Return the index of the minimum distance node
  min_dist_node
} bind def

% Define the Dijkstra's algorithm procedure
% This procedure takes a list of distances and a list
% of edges as input, and returns the minimum distances
% from the starting node to all other nodes.
/dijkstra {
  % Initialize variables
  /distances [] def
  /visited [] def
  /edges [] def
  /n_nodes 0 def

  % Pop the edges and distances from the stack
  /edges exch def
  /distances exch def

  % Get the number of nodes from the edges list
  edges {
    max
  } forall
  /n_nodes exch def

  % Initialize the distances list with infinity
  0 1 n_nodes 1 sub {
    distances dup length exch
    distances {
      pop
    } if
    /infinity 256. exp def
    infinity
    distances
    length
    n_nodes
    le {
      distances
      dup
      length
      1 add
      array
      dup
      0 1
      distances
      length
      {
        get
        exch
        distances
        exch
        put
      } for
    } if
  } for

  % Set the distance of the starting node to 0
  distances 0 0 put

  % Loop until all nodes are visited
  {
    % Find the minimum distance node that has not been visited
    distances
    visited
    find_min_dist_node
    /node exch def

    % Stop if there is no unvisited node with a minimum distance
    node -1 eq {
      break
    } if

    % Add the node to the visited list
    visited node
    visited

    % Update the distances of the neighboring nodes
    node edges node get {
      /neighbor exch def

      % Skip if the neighbor has already been visited
      neighbor visited {
        continue
      } if

      % Calculate the new distance of the neighbor
      distances node get
      distances neighbor get
      edges node neighbor get
      add
      /new_dist exch def

      % Update the distance of the neighbor if necessary
      new_dist distances neighbor get gt {
        distances neighbor new_dist put
      } if
    } forall
  } loop

  % Return the minimum distances
  distances
} bind def

% Define the list of distances
% This list should be a 1D array of size n, where n is the
% number of nodes in the graph. The distance of each node
% from the starting node is initialized with infinity,
% except for the starting node itself, whose distance is
% initialized to 0.
/distances [ 0 inf inf inf inf inf inf ] def

% Define the list of edges
% This list should be a 2D array of size n x n, where n is
% the number of nodes in the graph. Each element (i, j) of
% the array represents the weight of the edge from node i
% to node j. If there is no edge between the two nodes,
% the weight should be set to infinity.
/edges [  [ 0 inf 10  inf inf inf inf ]
  [ inf 0  inf 5   inf 15  20 ]
  [ inf 5  0   20  inf inf inf ]
  [ inf inf inf 0   15  inf inf ]
  [ inf inf inf inf 0   inf 10 ]
  [ inf inf inf inf 20  0   5  ]
  [ inf inf inf inf inf inf 0  ]
] def

% Invoke the dijkstra procedure to find the minimum distances
distances
edges
dijkstra