/find_min_dist_node {
  /param_consider exch def
  /param_distances exch def
  
  % Initialize variables
  /min_dist_index -1 def
  /min_dist infinity def

  % Loop through the list of nodes
  /i 0 def
  param_distances
  {
    % Get the current node and its distance
    /current_distance exch def

    % Update the minimum distance and node if necessary
    current_distance min_dist lt
    param_consider i get
    and    
    {
      /min_dist current_distance def
      /min_dist_index i def
    } if

    i 1 add
    /i exch def
  } forall

  % Return the index of the minimum distance node
  min_dist_index
} def

% takes [array] and [element] and ouputes the index of element in array, else -1
/find_in_array {
  /param_element exch def
  /param_array exch def
  /j 0 def
  /find_in_array_result -1 def

  param_array {
    param_element eq {
      /find_in_array_result j def
    } if

    j 1 add
    /j exch def
  } forall

  find_in_array_result
} def

/dijkstra {

  % Loop until all nodes are visited
  edges {
    % Find the minimum distance node that has not been visited
    
    distances visited find_min_dist_node
    /node exch def

    % Stop if there is no unvisited node with a minimum distance
    node -1 eq {
      exit
    } if

    % Add the node to the visited list
    visited node false put

    % Update the distances of the neighboring nodes
     0 1 edges length 1 sub {
      /neighbor exch def

      % Skip if the neighbor has already been visited
      visited neighbor get {
        % Calculate the new distance of the neighbor
        distances node get
        distances node get
        edges node get neighbor get
        add
        /new_dist exch def

        % Update the distance of the neighbor if necessary
        new_dist 
        distances neighbor get
        lt {
          distances neighbor new_dist put
          prev neighbor node put
        } if
      } if
    } for
  } forall

} def


/infinity 99999 def

/distances [ 0 infinity infinity infinity infinity infinity infinity ] def
/prev [ 0 0 0 0 0 0 0 ] def
/visited [true true true true true true true] def 

/edges [  [ 0 infinity 10  infinity infinity infinity infinity ]
  [ infinity 0  infinity 5   infinity 15  20 ]
  [ infinity 5  0   20  infinity infinity infinity ]
  [ infinity infinity infinity 0   15  infinity infinity ]
  [ infinity infinity infinity infinity 0   infinity 10 ]
  [ infinity infinity infinity infinity 20  0   5  ]
  [ infinity infinity infinity infinity infinity infinity 0  ]
] def

% Define an array with some values
dijkstra
distances {=} forall
prev {=} forall
quit