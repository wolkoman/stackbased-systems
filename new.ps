/find_min_dist_node {
  /param_consider exch def
  /param_distances exch def
  
  % Initialize variables
  /min_dist_index -1 def
  /min_dist infinity def

  % Loop through the list of nodes
  /i 0 def
  param_distances
  {
    % Get the current node and its distance
    /current_distance exch def

    % Update the minimum distance and node if necessary
    current_distance min_dist lt
    param_consider i get
    and    
    {
      /min_dist current_distance def
      /min_dist_index i def
    } if

    i 1 add
    /i exch def
  } forall

  % Return the index of the minimum distance node
  min_dist_index
} def

/dijkstra {
  /param_start_node exch def
  /param_edges exch def

  param_edges length array /distances exch def
  param_edges length array /prev exch def
  param_edges length array /visited exch def
  
  0 1 distances length 1 sub {
    /distances_iterator exch def
    distances distances_iterator infinity put
    prev distances_iterator -1 put
    visited distances_iterator true put
  } for
  distances param_start_node 0 put


  % Loop until all nodes are visited
  param_edges {
    draw_graph
    % Find the minimum distance node that has not been visited
    
    distances visited find_min_dist_node
    /node exch def

    % Stop if there is no unvisited node with a minimum distance
    node -1 eq {
      exit
    } if

    % Add the node to the visited list
    visited node false put

    % Update the distances of the neighboring nodes
     0 1 param_edges length 1 sub {
      /neighbor exch def

      % Skip if the neighbor has already been visited
      visited neighbor get {
        % Calculate the new distance of the neighbor
        distances node get
        param_edges node get neighbor get
        add
        /new_dist exch def

        % Update the distance of the neighbor if necessary
        new_dist 
        distances neighbor get
        lt {
          distances neighbor new_dist put
          prev neighbor node put
        } if
      } if
    } for
  } forall
} def

% get a node index and calculate its location
/calculate_coordinates {
    /node exch def
    /x angle node mul cos radius mul def
    /y angle node mul sin radius mul def
    x y
} def


/draw_edge {

  % draw plain edge
  newpath
  calculate_coordinates /y1 exch def /x1 exch def
  calculate_coordinates /y2 exch def /x2 exch def
  x1 y1 moveto
  x2 y2 lineto
  stroke
  closepath

  % calculate arrow position
  /engel y2 y1 sub x2 x1 sub atan def
  /newx x1 engel cos 10 mul add def
  /newy y1 engel sin 10 mul add def
  
  % draw edge arrow
  newpath
  newx newy moveto
  newx engel 25 add cos 10 mul add
  newy engel 25 add sin 10 mul add lineto
  newx engel 25 sub cos 10 mul add
  newy engel 25 sub sin 10 mul add lineto
  newx newy lineto
  fill
  closepath

  % draw edge label  
  x2 x1 add 0.5 mul engel 90 add cos 5 mul add
  y2 y1 add 0.5 mul engel 90 add sin 5 mul add
  moveto
  /Helvetica findfont 8 scalefont setfont
  edges i get j get (         ) cvs show
  

} def

/draw_graph {

  % set variables
  /num_of_nodes edges length def
  /radius 100 def
  /angle 360 num_of_nodes div def
  
  % page setup
  << /PageSize [400 400] >> setpagedevice
  1 setlinewidth
  200 200 translate
  
  % draw edges
  0 1 num_of_nodes 1 sub {
    /i exch def
    0 1 num_of_nodes 1 sub {
      /j exch def
      edges i get j get infinity ne % dont draw if distance if infinity
      edges i get j get 0 ne        % dont draw if distance is zero
      and {

        % color whethered visited, not-visited or shortest
        color_normal setrgbcolor
        visited i get { color_light setrgbcolor } if
        i j prev j get i eq { color_correct setrgbcolor } if
        draw_edge
      } if
    } for 

  } for

  % draw nodes
  0 1 num_of_nodes 1 sub {
    /i exch def
    
    % draw node circle
    newpath
    i calculate_coordinates 10 0 360 arc
    color_normal setrgbcolor
    visited i get { color_light setrgbcolor } if
    stroke
    i calculate_coordinates 10 0 360 arc
    color_back setrgbcolor
    visited i get { 1 1 1 setrgbcolor } if
    fill

    % draw node label
    i calculate_coordinates exch 3 sub exch 4 sub moveto
    color_normal setrgbcolor
    visited i get { color_light setrgbcolor } if
    /Helvetica findfont 12 scalefont setfont
    i (      ) cvs show
  } for
  showpage
} def

/infinity { 99999 } def
/color_correct { 0.7 0.2 0.2 } def
/color_normal { 0 0 0 } def
/color_light { 0.7 0.7 0.7 } def
/color_back { 0.85 0.85 0.85 } def

% Define the graph
/edges [  
  [ 0 infinity 10  infinity infinity infinity infinity ]
  [ infinity 0  infinity 5 infinity 15  20 ]
  [ infinity 5  0   20  infinity infinity infinity ]
  [ infinity infinity infinity 0   15  infinity infinity ]
  [ infinity infinity infinity infinity 0   infinity 10 ]
  [ infinity infinity infinity infinity 20  0   5 infinity  ]
  [ infinity infinity infinity infinity infinity infinity 0 ]
] def



edges 0 dijkstra clear
draw_graph
quit