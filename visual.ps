% Define the list of distances
% This list should be a 1D array of size n, where n is the
% number of nodes in the graph. The distance of each node
% from the starting node is initialized with infinity,
% except for the starting node itself, whose distance is
% initialized to 0.
/distances [ 0 inf inf inf inf inf inf ] def

% Define the list of edges
% This list should be a 2D array of size n x n, where n is
% the number of nodes in the graph. Each element (i, j) of
% the array represents the weight of the edge from node i
% to node j. If there is no edge between the two nodes,
% the weight should be set to infinity.
/edges [
  [ 0 inf 10  inf inf inf inf ]
  [ inf 0  inf 5   inf 15  20 ]
  [ inf 5  0   20  inf inf inf ]
  [ inf inf inf 0   15  inf inf ]
  [ inf inf inf inf 0   inf 10 ]
  [ inf inf inf inf 20  0   5  ]
  [ inf inf inf inf inf inf 0  ]
] def

% Define the procedure for drawing a node
/draw_node {
  % Get the node index and coordinates from the stack
  /y exch def
  /x exch def
  /node exch def

  % Draw the node
  newpath
  x y 10 0 360 arc
  fill
  0 setgray
  stroke

  % Draw the node label
  x y moveto
  node 10 string cvs show
} bind def

% Define the procedure for drawing an edge
/draw_edge {
  % Get the endpoints and weight of the edge from the stack
  /weight exch def
  /y2 exch def
  /x2 exch def
  /y1 exch def
  /x1 exch def

  % Draw the edge
  newpath
  x1 y1 moveto
  x2 y2 lineto
  stroke

  % Calculate the midpoint of the edge
  x1 x2 add 2 div
  y1 y2 add 2 div
  /mid_x exch def
  /mid_y exch def

  % Draw the edge weight
  mid_x mid_y moveto
  weight 10 string cvs show
} bind def

% Define the procedure for drawing the graph
/draw_graph {
  % Initialize variables
  /y_offset 75 def
  /x_offset 75 def
  /node_radius 10 def
  /node_spacing 50 def

  % Loop through the nodes
  0 1 n_nodes 1 sub {
    /node exch def

    % Calculate the coordinates of the node
    node node_spacing mul
    node_radius 2 mul
    x_offset add
    /x exch def
    y_offset
    /y exch def

    % Draw the node
    node x y
    draw_node

    % Draw the edges of the node
    node edges node get {
      /neighbor exch def

      % Skip if